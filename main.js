/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MdToAnkiPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  deepseekApiKey: "",
  outputPath: "",
  enableWordCards: true,
  enablePhraseCards: true,
  enableSentenceCards: true
};
var DeepSeekAPI = class {
  constructor(apiKey) {
    this.baseUrl = "https://api.deepseek.com/v1/chat/completions";
    this.apiKey = apiKey;
  }
  async translateWord(word, context) {
    const prompt = `\u8BF7\u7FFB\u8BD1\u82F1\u6587\u5355\u8BCD"${word}"\u5728\u4EE5\u4E0B\u53E5\u5B50\u4E2D\u7684\u542B\u4E49\uFF1A

\u53E5\u5B50\uFF1A${context}

\u8BF7\u6309\u4EE5\u4E0BJSON\u683C\u5F0F\u56DE\u590D\uFF1A
{
    "meaning": "\u8BE5\u5355\u8BCD\u5728\u6B64\u53E5\u5B50\u4E2D\u7684\u4E2D\u6587\u542B\u4E49",
    "example": "\u539F\u53E5\u5B50"
}

\u53EA\u8FD4\u56DEJSON\uFF0C\u4E0D\u8981\u5176\u4ED6\u5185\u5BB9\u3002`;
    try {
      const response = await this.makeRequest(prompt);
      return JSON.parse(response);
    } catch (e) {
      console.error(`\u7FFB\u8BD1\u5355\u8BCD '${word}' \u65F6\u51FA\u9519:`, e);
      return {
        meaning: `\u7FFB\u8BD1\u5931\u8D25: ${word}`,
        example: context
      };
    }
  }
  async translatePhrase(phrase, context) {
    const prompt = `\u8BF7\u7FFB\u8BD1\u82F1\u6587\u8BCD\u7EC4"${phrase}"\u5728\u4EE5\u4E0B\u53E5\u5B50\u4E2D\u7684\u542B\u4E49\uFF1A

\u53E5\u5B50\uFF1A${context}

\u8BF7\u6309\u4EE5\u4E0BJSON\u683C\u5F0F\u56DE\u590D\uFF1A
{
    "meaning": "\u8BE5\u8BCD\u7EC4\u5728\u6B64\u53E5\u5B50\u4E2D\u7684\u4E2D\u6587\u542B\u4E49", 
    "example": "\u539F\u53E5\u5B50"
}

\u53EA\u8FD4\u56DEJSON\uFF0C\u4E0D\u8981\u5176\u4ED6\u5185\u5BB9\u3002`;
    try {
      const response = await this.makeRequest(prompt);
      return JSON.parse(response);
    } catch (e) {
      console.error(`\u7FFB\u8BD1\u8BCD\u7EC4 '${phrase}' \u65F6\u51FA\u9519:`, e);
      return {
        meaning: `\u7FFB\u8BD1\u5931\u8D25: ${phrase}`,
        example: context
      };
    }
  }
  async translateSentence(sentence) {
    const prompt = `\u8BF7\u5C06\u4EE5\u4E0B\u82F1\u6587\u53E5\u5B50\u7FFB\u8BD1\u6210\u4E2D\u6587\uFF0C\u8981\u6C42\u7FFB\u8BD1\u51C6\u786E\u3001\u81EA\u7136\uFF1A

${sentence}

\u53EA\u8FD4\u56DE\u4E2D\u6587\u7FFB\u8BD1\uFF0C\u4E0D\u8981\u5176\u4ED6\u5185\u5BB9\u3002`;
    try {
      const response = await this.makeRequest(prompt);
      return response.trim();
    } catch (e) {
      console.error("\u7FFB\u8BD1\u53E5\u5B50\u65F6\u51FA\u9519:", e);
      return `\u7FFB\u8BD1\u5931\u8D25: ${sentence}`;
    }
  }
  async makeRequest(prompt) {
    const data = {
      model: "deepseek-chat",
      messages: [
        { role: "user", content: prompt }
      ],
      temperature: 0.3,
      max_tokens: 1e3
    };
    const response = await fetch(this.baseUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.apiKey}`
      },
      body: JSON.stringify(data)
    });
    if (!response.ok) {
      throw new Error(`API\u8BF7\u6C42\u5931\u8D25: ${response.status}, ${await response.text()}`);
    }
    const result = await response.json();
    return result.choices[0].message.content;
  }
};
var MarkdownParser = class {
  constructor(content) {
    this.content = content;
  }
  extractContent() {
    return {
      words: this.extractBoldText(),
      phrases: this.extractItalicText(),
      sentences: this.extractHighlightedText()
    };
  }
  extractBoldText() {
    const pattern = /\*\*([^*]+)\*\*/g;
    const matches = [];
    let match;
    while ((match = pattern.exec(this.content)) !== null) {
      const boldText = match[1];
      const context = this.getSentenceContext(match.index, match.index + match[0].length);
      matches.push({ text: boldText, context });
    }
    return matches;
  }
  extractItalicText() {
    const pattern = /(?<!\*)\*([^*]+)\*(?!\*)/g;
    const matches = [];
    let match;
    while ((match = pattern.exec(this.content)) !== null) {
      const italicText = match[1];
      const context = this.getSentenceContext(match.index, match.index + match[0].length);
      matches.push({ text: italicText, context });
    }
    return matches;
  }
  extractHighlightedText() {
    const pattern = /==([^=]+)==/g;
    const matches = [];
    let match;
    while ((match = pattern.exec(this.content)) !== null) {
      matches.push(match[1].trim());
    }
    return matches;
  }
  getSentenceContext(startPos, endPos) {
    let sentenceStart = startPos;
    while (sentenceStart > 0 && !/[.!?]/.test(this.content[sentenceStart])) {
      sentenceStart--;
    }
    if (sentenceStart > 0) {
      sentenceStart++;
    }
    let sentenceEnd = endPos;
    while (sentenceEnd < this.content.length && !/[.!?]/.test(this.content[sentenceEnd])) {
      sentenceEnd++;
    }
    if (sentenceEnd < this.content.length) {
      sentenceEnd++;
    }
    let sentence = this.content.substring(sentenceStart, sentenceEnd).trim();
    sentence = sentence.replace(/\*\*([^*]+)\*\*/g, "$1");
    sentence = sentence.replace(/\*([^*]+)\*/g, "$1");
    sentence = sentence.replace(/==([^=]+)==/g, "$1");
    return sentence;
  }
};
var AnkiExporter = class {
  constructor() {
    this.cards = [];
  }
  addWordCard(word, translation) {
    const front = word;
    const back = `${translation.meaning}<br><br><i>${translation.example}</i>`;
    this.cards.push({ front, back });
  }
  addPhraseCard(phrase, translation) {
    const front = phrase;
    const back = `${translation.meaning}<br><br><i>${translation.example}</i>`;
    this.cards.push({ front, back });
  }
  addSentenceCard(sentence, translation) {
    this.cards.push({ front: sentence, back: translation });
  }
  exportToAnkiFormat() {
    let output = "#separator:tab\n#html:true\n\n";
    for (const card of this.cards) {
      output += `${card.front}	${card.back}
`;
    }
    return output;
  }
  getCardCount() {
    return this.cards.length;
  }
  clear() {
    this.cards = [];
  }
};
var ProcessingModal = class extends import_obsidian.Modal {
  constructor(app) {
    super(app);
    this.currentStep = "";
    this.totalSteps = 0;
    this.currentStepNumber = 0;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u6B63\u5728\u5904\u7406Anki\u95EA\u5361..." });
    this.progressEl = contentEl.createEl("div", {
      cls: "progress-container",
      text: "\u51C6\u5907\u4E2D..."
    });
  }
  updateProgress(step, current, total) {
    this.currentStep = step;
    this.currentStepNumber = current;
    this.totalSteps = total;
    if (this.progressEl) {
      this.progressEl.textContent = `${step} (${current}/${total})`;
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var MdToAnkiPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addStatusBarItem().setText("Anki");
    this.addCommand({
      id: "convert-to-anki",
      name: "\u8F6C\u6362\u5F53\u524D\u6587\u4EF6\u4E3AAnki\u95EA\u5361",
      callback: () => this.convertCurrentFile()
    });
    this.addSettingTab(new MdToAnkiSettingTab(this.app, this));
  }
  async convertCurrentFile() {
    var _a;
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2AMarkdown\u6587\u4EF6");
      return;
    }
    if (!this.settings.deepseekApiKey) {
      new import_obsidian.Notice("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6EDeepSeek API\u5BC6\u94A5");
      return;
    }
    const content = await this.app.vault.read(activeFile);
    const parser = new MarkdownParser(content);
    const extracted = parser.extractContent();
    const totalItems = extracted.words.length + extracted.phrases.length + extracted.sentences.length;
    if (totalItems === 0) {
      new import_obsidian.Notice("\u5F53\u524D\u6587\u4EF6\u4E2D\u6CA1\u6709\u627E\u5230\u6807\u8BB0\u5185\u5BB9\uFF08\u52A0\u7C97\u3001\u659C\u4F53\u6216\u9AD8\u4EAE\u6587\u672C\uFF09");
      return;
    }
    const modal = new ProcessingModal(this.app);
    modal.open();
    try {
      const api = new DeepSeekAPI(this.settings.deepseekApiKey);
      const exporter = new AnkiExporter();
      let processed = 0;
      if (this.settings.enableWordCards && extracted.words.length > 0) {
        for (const word of extracted.words) {
          modal.updateProgress(`\u6B63\u5728\u5904\u7406\u751F\u8BCD: ${word.text}`, ++processed, totalItems);
          const translation = await api.translateWord(word.text, word.context);
          exporter.addWordCard(word.text, translation);
          await this.sleep(100);
        }
      }
      if (this.settings.enablePhraseCards && extracted.phrases.length > 0) {
        for (const phrase of extracted.phrases) {
          modal.updateProgress(`\u6B63\u5728\u5904\u7406\u8BCD\u7EC4: ${phrase.text}`, ++processed, totalItems);
          const translation = await api.translatePhrase(phrase.text, phrase.context);
          exporter.addPhraseCard(phrase.text, translation);
          await this.sleep(100);
        }
      }
      if (this.settings.enableSentenceCards && extracted.sentences.length > 0) {
        for (const sentence of extracted.sentences) {
          modal.updateProgress(`\u6B63\u5728\u5904\u7406\u53E5\u5B50: ${sentence.substring(0, 30)}...`, ++processed, totalItems);
          const translation = await api.translateSentence(sentence);
          exporter.addSentenceCard(sentence, translation);
          await this.sleep(100);
        }
      }
      const ankiContent = exporter.exportToAnkiFormat();
      const outputFileName = `${activeFile.basename}_anki_cards.txt`;
      if (this.settings.outputPath && this.isAbsolutePath(this.settings.outputPath)) {
        await this.writeToAbsolutePath(this.settings.outputPath, outputFileName, ankiContent);
      } else {
        const outputPath = this.settings.outputPath || ((_a = activeFile.parent) == null ? void 0 : _a.path) || "";
        const fullOutputPath = outputPath ? `${outputPath}/${outputFileName}` : outputFileName;
        await this.app.vault.create(fullOutputPath, ankiContent);
      }
      modal.close();
      new import_obsidian.Notice(`\u6210\u529F\u751F\u6210 ${exporter.getCardCount()} \u5F20Anki\u95EA\u5361\uFF01\u6587\u4EF6\u5DF2\u4FDD\u5B58\u4E3A: ${outputFileName}`);
    } catch (error) {
      modal.close();
      console.error("\u8F6C\u6362\u8FC7\u7A0B\u4E2D\u51FA\u73B0\u9519\u8BEF:", error);
      new import_obsidian.Notice(`\u8F6C\u6362\u5931\u8D25: ${error.message}`);
    }
  }
  sleep(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }
  isAbsolutePath(path) {
    return path.startsWith("/") || // Unix/Mac 绝对路径
    /^[A-Za-z]:\\/.test(path) || // Windows 绝对路径 (C:\)
    path.startsWith("~");
  }
  async writeToAbsolutePath(dirPath, fileName, content) {
    try {
      let fullDirPath = dirPath;
      if (dirPath.startsWith("~")) {
        throw new Error("\u6D4F\u89C8\u5668\u73AF\u5883\u4E0B\u65E0\u6CD5\u8BBF\u95EE\u7528\u6237\u4E3B\u76EE\u5F55\uFF0C\u8BF7\u4F7F\u7528\u5B8C\u6574\u8DEF\u5F84");
      }
      const fullPath = `${fullDirPath}/${fileName}`;
      const blob = new Blob([content], { type: "text/plain" });
      const url = URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = fileName;
      link.style.display = "none";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      URL.revokeObjectURL(url);
      new import_obsidian.Notice(`\u6587\u4EF6\u5DF2\u4E0B\u8F7D\u5230\u6D4F\u89C8\u5668\u9ED8\u8BA4\u4E0B\u8F7D\u76EE\u5F55: ${fileName}`);
    } catch (error) {
      throw new Error(`\u65E0\u6CD5\u5199\u5165\u5230\u7EDD\u5BF9\u8DEF\u5F84: ${error.message}`);
    }
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var MdToAnkiSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Markdown to Anki Converter \u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("DeepSeek API\u5BC6\u94A5").setDesc("\u8BF7\u8F93\u5165\u60A8\u7684DeepSeek API\u5BC6\u94A5\uFF08\u83B7\u53D6\u5730\u5740\uFF1Ahttps://platform.deepseek.com/\uFF09").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.deepseekApiKey).onChange(async (value) => {
      this.plugin.settings.deepseekApiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u8F93\u51FA\u6587\u4EF6\u8DEF\u5F84").setDesc('\u751F\u6210\u7684Anki\u6587\u4EF6\u4FDD\u5B58\u8DEF\u5F84\u3002\u652F\u6301\uFF1A\n\u2022 \u76F8\u5BF9\u8DEF\u5F84\uFF08\u5728\u5F53\u524D\u5E93\u5185\uFF09\uFF1A\u5982 "Anki Cards"\n\u2022 \u7EDD\u5BF9\u8DEF\u5F84\uFF08\u4E0B\u8F7D\u5230\u7CFB\u7EDF\u76EE\u5F55\uFF09\uFF1A\u5982 "/Users/\u7528\u6237\u540D/Downloads"\n\u2022 \u7559\u7A7A\u5219\u4FDD\u5B58\u5728\u5F53\u524D\u6587\u4EF6\u540C\u76EE\u5F55').addText((text) => text.setPlaceholder("\u4F8B\u5982: /Users/jz/Downloads \u6216 Anki Cards").setValue(this.plugin.settings.outputPath).onChange(async (value) => {
      this.plugin.settings.outputPath = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u529F\u80FD\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u751F\u6210\u751F\u8BCD\u5361\u7247").setDesc("\u662F\u5426\u5904\u7406\u52A0\u7C97\u6587\u672C\uFF08**word**\uFF09\u5E76\u751F\u6210\u751F\u8BCD\u5361\u7247").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableWordCards).onChange(async (value) => {
      this.plugin.settings.enableWordCards = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u751F\u6210\u8BCD\u7EC4\u5361\u7247").setDesc("\u662F\u5426\u5904\u7406\u659C\u4F53\u6587\u672C\uFF08*phrase*\uFF09\u5E76\u751F\u6210\u8BCD\u7EC4\u5361\u7247").addToggle((toggle) => toggle.setValue(this.plugin.settings.enablePhraseCards).onChange(async (value) => {
      this.plugin.settings.enablePhraseCards = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("\u751F\u6210\u53E5\u5B50\u5361\u7247").setDesc("\u662F\u5426\u5904\u7406\u9AD8\u4EAE\u6587\u672C\uFF08==sentence==\uFF09\u5E76\u751F\u6210\u53E5\u5B50\u7FFB\u8BD1\u5361\u7247").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableSentenceCards).onChange(async (value) => {
      this.plugin.settings.enableSentenceCards = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u4F7F\u7528\u8BF4\u660E" });
    const usageEl = containerEl.createEl("div");
    usageEl.createEl("p", { text: "1. \u5728Markdown\u6587\u6863\u4E2D\u4F7F\u7528\u4EE5\u4E0B\u683C\u5F0F\u6807\u8BB0\u5B66\u4E60\u5185\u5BB9\uFF1A" });
    usageEl.createEl("ul").innerHTML = `
			<li><strong>**\u5355\u8BCD**</strong> - \u751F\u6210\u751F\u8BCD\u5361\u7247</li>
			<li><em>*\u8BCD\u7EC4*</em> - \u751F\u6210\u8BCD\u7EC4\u5361\u7247</li>
			<li><mark>==\u53E5\u5B50==</mark> - \u751F\u6210\u53E5\u5B50\u7FFB\u8BD1\u5361\u7247</li>
		`;
    usageEl.createEl("p", { text: '2. \u4F7F\u7528\u547D\u4EE4\u9762\u677F\uFF08Ctrl/Cmd+P\uFF09\u641C\u7D22"\u8F6C\u6362\u5F53\u524D\u6587\u4EF6\u4E3AAnki\u95EA\u5361"\u6216\u4F7F\u7528\u5FEB\u6377\u952E' });
    usageEl.createEl("p", { text: "3. \u5904\u7406\u5B8C\u6210\u540E\u4F1A\u5728\u6307\u5B9A\u76EE\u5F55\u751F\u6210Anki\u53EF\u5BFC\u5165\u7684txt\u6587\u4EF6" });
  }
};
